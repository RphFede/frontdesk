---
import BaseLayout from "../layouts/BaseLayout.astro"

// 1. Obtenemos los proveedores desde nuestra API al cargar la p√°gina
const response = await fetch('http://127.0.0.1:5000/api/suppliers');
const data = await response.json();
const suppliers = data.suppliers || []; // Usamos un array vac√≠o si falla
---
<BaseLayout>
<section id="loadbill" class="view">

  <h1>Cargar Factura</h1>

<div class="view-container">  
  <div class="form-section">
    <form id="loadbill-form">
      <!-- Informaci√≥n del Proveedor -->
      <fieldset>
        <legend>üè¢ Informaci√≥n de proveedor</legend>
        <div class="row">
          <div class="group">
            <label for="supplier">Raz√≥n Social *</label>
                        <select id="supplier" required data-suppliers={JSON.stringify(suppliers)}>
              <option value="">Seleccionar proveedor...</option>
              {suppliers.map(supplier => (
                <option value={supplier.id} data-cuit={supplier.cuit}>{supplier.name}</option>
              ))}
            </select>
          </div>
          <div class="group">
            <label for="supplier-rut">CUIT</label>
            <input type="text" id="supplier-rut" placeholder="12.345.678-9" readonly>
          </div>
          <div class="group">
            <label for="add-supplier">Agregar Nuevo</label>
            <button type="button" id="add-supplier">+</button>
          </div>          
        </div>
      </fieldset>

      <!-- Informaci√≥n de la Factura -->
      <fieldset>
        <legend>üìÑ Datos de factura</legend>
        <div class="row">
          <div class="group">
            <label for="classification">Clasificaci√≥n *</label>
            <select id="classification" required>
              <option value="">Seleccionar clasificaci√≥n...</option>
              <option value="consumer goods">Consumo</option>
              <option value="services">Servicio</option>
              <option value="capital goods">Capital</option>
            </select>
          </div>
          <div class="group">
            <label for="invoice-number">Nro. Factura *</label>
            <input type="text" id="invoice-number" placeholder="Ej: B-00001-01234" required>
          </div>
          <div class="group">
            <label for="invoice-date">Fecha de Emisi√≥n *</label>
            <input type="date" id="invoice-date" required>
          </div>
          <div class="group">
            <label for="amount">Monto *</label>
            <input type="number" id="amount" placeholder="$" required>
          </div>
        </div>
        
        <div class="row">
          <div class="group">
            <label for="description">Descripci√≥n *</label>
            <textarea id="description" placeholder="Descripci√≥n de bien o servicio..." required></textarea>
          </div>
        </div>
      </fieldset>

      <!-- Botones de Acci√≥n -->
      <div class="actions">
        <button type="button" class="clean" id="clean-btn">‚ùå Limpiar valores</button>
        <button type="submit" class="submit" id="submit-btn">‚úÖ Registrar factura</button>
      </div>
    </form>
  </div>
</div>
</section>

<!-- Modal para A√±adir Proveedor -->
<div id="add-supplier-modal" class="modal hidden">
  <div class="modal-content">
    <h2>A√±adir Nuevo Proveedor</h2>
    <form id="add-supplier-form">
      <div class="form-group">
        <label for="new-supplier-name">Raz√≥n Social *</label>
        <input type="text" id="new-supplier-name" required>
      </div>
      <div class="form-group">
        <label for="new-supplier-cuit">CUIT *</label>
        <input type="text" id="new-supplier-cuit" placeholder="30-12345678-9" required>
      </div>
      <div class="modal-actions">
        <button type="button" class="cancel-btn">Cancelar</button>
        <button type="submit" class="save-btn">Guardar</button>
      </div>
    </form>
  </div>
</div>

</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // --- Selecci√≥n de Elementos ---
    const supplierSelect = document.getElementById('supplier');
    const supplierRut = document.getElementById('supplier-rut');
    const addSupplierBtn = document.getElementById('add-supplier');
    const loadBillForm = document.getElementById('loadbill-form');
    const cleanBtn = document.getElementById('clean-btn');
    const addSupplierModal = document.getElementById('add-supplier-modal');
    const cancelBtn = addSupplierModal.querySelector('.cancel-btn');
    const addSupplierForm = document.getElementById('add-supplier-form');

    // --- L√≥gica de Proveedores ---

    // Evento para actualizar el CUIT cuando se selecciona un proveedor
    supplierSelect.addEventListener('change', () => {
      const selectedOption = supplierSelect.options[supplierSelect.selectedIndex];
      console.log('Opci√≥n seleccionada:', selectedOption);
      if (selectedOption && selectedOption.dataset.cuit) {
        const cuit = selectedOption.dataset.cuit;
        console.log('CUIT obtenido:', cuit);
        supplierRut.value = cuit;
      } else {
        console.log('No se encontr√≥ CUIT o no hay opci√≥n seleccionada.');
        supplierRut.value = '';
      }
    });

    // --- L√≥gica del Modal --- 

    const showModal = () => {
      addSupplierModal.classList.remove('hidden');
    };

    const hideModal = () => {
      addSupplierModal.classList.add('hidden');
    };

    addSupplierBtn.addEventListener('click', showModal);
    cancelBtn.addEventListener('click', hideModal);

    // Evento para GUARDAR el nuevo proveedor en la API
    addSupplierForm.addEventListener('submit', async (e) => {
      e.preventDefault();
      const newName = document.getElementById('new-supplier-name').value;
      const newCuit = document.getElementById('new-supplier-cuit').value;

      if (!newName || !newCuit) return;

      const response = await fetch('http://127.0.0.1:5000/api/suppliers', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: newName, cuit: newCuit })
      });
      
      if (response.ok) {
        const newSupplier = await response.json();
        // A√±adir el nuevo proveedor al select
        const newOption = document.createElement('option');
        newOption.value = newSupplier.id;
        newOption.textContent = newSupplier.name;
        newOption.dataset.cuit = newSupplier.cuit;
        supplierSelect.appendChild(newOption);
        // Seleccionar el nuevo proveedor y cerrar modal
        supplierSelect.value = newSupplier.id;
        supplierSelect.dispatchEvent(new Event('change')); // Simula el cambio para actualizar CUIT
        hideModal();
        alert('Proveedor a√±adido exitosamente.');
      } else {
        const error = await response.json();
        alert(`Error: ${error.message}`);
      }
    });

    // --- L√≥gica del Formulario Principal (Cargar Factura) ---

    // Evento para REGISTRAR la factura en la API
    loadBillForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        const billData = {
            supplierId: document.getElementById('supplier').value,
            classification: document.getElementById('classification').value,
            invoiceNumber: document.getElementById('invoice-number').value,
            invoiceDate: document.getElementById('invoice-date').value,
            amount: document.getElementById('amount').value, // A√±adimos el monto
            description: document.getElementById('description').value,
        };

        const response = await fetch('http://127.0.0.1:5000/api/bills', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(billData),
        });

        if (response.ok) {
            alert('¬°Factura registrada exitosamente!');
            loadBillForm.reset(); // Limpia el formulario
            supplierRut.value = ''; // Limpia el campo CUIT
        } else {
            const error = await response.json();
            alert(`Error al registrar la factura: ${error.message}`);
        }
    });

    // Evento para el bot√≥n de LIMPIAR
    cleanBtn.addEventListener('click', () => {
        loadBillForm.reset();
        supplierRut.value = '';
    });
  });
</script>

<style lang="stylus">

.form-section
  background var(--bg-secondary)
  border-radius 12px
  border 1px solid var(--border-color)
  padding 2rem
  box-shadow 0 2px 8px rgba(0, 0, 0, 0.1)
  
fieldset
  border 1px solid var(--border-color)
  border-radius 8px
  padding 1.5rem
  margin-bottom 2rem
  background transparent
  
  legend
    padding 0 1rem
    color var(--text-primary)
    font-weight 600
    font-size 1.1rem

.row
  display flex
  gap .5rem
  margin-bottom 1.5rem
  
  @media (max-width: 768px)
    flex-direction column
    gap 1rem
  
.group
  flex 1
  
  label
    display block
    margin-bottom 0.5rem
    color var(--text-primary)
    font-weight 500
    font-size 0.9rem
  
  input, select, textarea
    width 100%
    padding 0.75rem
    border 1px solid var(--border-color)
    border-radius 6px
    background var(--bg-input)
    color var(--text-primary)
    font-size 1rem
    transition border-color 0.2s ease
    
    &:focus
      outline none
      border-color var(--accent-primary)
      box-shadow 0 0 0 2px rgba(59, 130, 246, 0.1)
    
    &:required:invalid
      border-color var(--error-color)
    
    &[readonly]
      background var(--bg-disabled)
      color var(--text-secondary)
      cursor not-allowed
  
  textarea
    min-height 100px
    resize vertical
    font-family inherit

.form-actions
  display flex
  gap 1rem
  justify-content flex-end
  padding-top 2rem
  border-top 1px solid var(--border-color)
  
  @media (max-width: 768px)
    flex-direction column
  
  button
    padding 0.75rem 2rem
    border none
    border-radius 6px
    font-weight 600
    font-size 1rem
    cursor pointer
    transition all 0.2s ease
      
      &:hover
        background var(--bg-hover)
    
    &.clean
      background var(--accent-primary)
      color white
      
      &:hover
        background var(--accent-hover)
        transform translateY(-1px)
    
    &.submit
      background var(--success-color)
      color white
      
      &:hover
        background #5a8a5a
        transform translateY(-1px)
</style>