---
import BaseLayout from "../layouts/BaseLayout.astro"
---
<BaseLayout>
<section id="invoices-view" class="view">

  <h1>Listado de Facturas</h1>


<div class="view-container">  
  <div class="toolbar">
    <div class="left">
      <input type="text" id="search-input" placeholder="üîç Buscar por...">
      <select id="status-filter">
        <option value="">Todos los estados</option>
        <option value="Pendiente">Pendientes</option>
        <option value="Pagada">Pagadas</option>
        <option value="Vencida">Vencidas</option>
      </select>
      <select id="category-filter">
        <option value="">Todas las categor√≠as</option>
        <option value="consumer goods">Consumo</option>
        <option value="services">Servicio</option>
        <option value="capital goods">Capital</option>
      </select>
    </div>
    <div class="right">
      <button class="secondary" id="clear-filters-btn">üóëÔ∏è Limpiar Filtros</button>
      <button class="primary" id="export-btn">üì§ Exportar</button>
    </div>
  </div>
  
  <!-- Tabla de facturas -->
  <div class="table-container">
    <table id="invoices-table">
      <thead>
        <tr>
          <th>N√∫mero</th>
          <th>Proveedor</th>
          <th>Fecha Emisi√≥n</th>
          <th>Fecha Vencimiento</th>
          <th>Monto</th>
          <th>Estado</th>
          <th>Categor√≠a</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody id="invoices-tbody">
        <!-- Las facturas se cargar√°n din√°micamente aqu√≠ -->
      </tbody>
    </table>
  </div>
  
  <!-- Paginaci√≥n -->
  <div class="pagination">
    <button id="prev-page" disabled>‚Üê Anterior</button>
    <span id="page-info">P√°gina 1 de 1</span>
    <button id="next-page" disabled>Siguiente ‚Üí</button>
  </div>
  
  <!-- Modal para ver detalles de factura -->
  <div id="invoice-modal" class="modal" style="display: none;">
    <div class="modal-content">
      <div class="modal-header">
        <h3>üìÑ Detalles de la Factura</h3>
        <button class="close-btn" id="close-modal">‚úï</button>
      </div>
      <div class="modal-body" id="modal-body">
        <!-- Contenido del modal se carga din√°micamente -->
      </div>
    </div>
  </div>
</section>
</BaseLayout>

<script>
  document.addEventListener('DOMContentLoaded', function() {
  let invoicesData = [];
  let filteredInvoices = [];
  let currentPage = 1;
  const itemsPerPage = 10;

  const searchInput = document.getElementById('search-input');
  const statusFilter = document.getElementById('status-filter');
  const categoryFilter = document.getElementById('category-filter');
  const clearFiltersBtn = document.getElementById('clear-filters-btn');
  const exportBtn = document.getElementById('export-btn');
  const invoicesTbody = document.getElementById('invoices-tbody');
  const prevPageBtn = document.getElementById('prev-page');
  const nextPageBtn = document.getElementById('next-page');
  const pageInfo = document.getElementById('page-info');
  const invoiceModal = document.getElementById('invoice-modal');
  const closeModalBtn = document.getElementById('close-modal');
  const modalBody = document.getElementById('modal-body');

  function formatCurrency(amount) {
    return new Intl.NumberFormat('es-CL', { style: 'currency', currency: 'CLP' }).format(amount);
  }

  function formatDate(dateString) {
    return new Date(dateString).toLocaleDateString('es-CL');
  }

  function createStatusBadge(status) {
    const statusClass = `status-${status.toLowerCase()}`;
    return `<span class=\"status-badge ${statusClass}\">${status}</span>`;
  }

  function renderTable() {
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageInvoices = filteredInvoices.slice(startIndex, endIndex);

    invoicesTbody.innerHTML = '';

    if (pageInvoices.length === 0) {
      invoicesTbody.innerHTML = `\n        <tr>\n          <td colspan=\"8\" style=\"text-align: center; padding: 40px; color: #7f8c8d;\">\n            üìã No se encontraron facturas que coincidan con los filtros aplicados\n          </td>\n        </tr>\n      `;
      return;
    }

    pageInvoices.forEach(invoice => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td>${invoice.invoice_number}</td>
        <td>${invoice.supplier}</td>
        <td>${formatDate(invoice.invoice_date)}</td>
        <td>${invoice.due_date ? formatDate(invoice.due_date) : ''}</td>
        <td>${invoice.amount ? formatCurrency(invoice.amount) : ''}</td>
        <td>${createStatusBadge(invoice.status || 'Pendiente')}</td>
        <td>${invoice.classification}</td>
        <td>
          <button class=\"action-btn btn-view\" onclick=\"viewInvoice(${invoice.id})\">üëÅÔ∏è Ver</button>
          <button class=\"action-btn btn-edit\" onclick=\"editInvoice(${invoice.id})\">‚úèÔ∏è Editar</button>
          <button class=\"action-btn btn-delete\" onclick=\"deleteInvoice(${invoice.id})\">üóëÔ∏è Eliminar</button>
        </td>
      `;
      invoicesTbody.appendChild(row);
    });

    updatePagination();
  }

  function updatePagination() {
    const totalPages = Math.ceil(filteredInvoices.length / itemsPerPage);

    prevPageBtn.disabled = currentPage === 1;
    nextPageBtn.disabled = currentPage === totalPages || totalPages === 0;

    pageInfo.textContent = totalPages > 0 ? `P√°gina ${currentPage} de ${totalPages}` : 'Sin resultados';
  }

  function applyFilters() {
    const searchTerm = searchInput.value.toLowerCase();
    const statusValue = statusFilter.value;
    const categoryValue = categoryFilter.value;

    filteredInvoices = invoicesData.filter(invoice => {
      const matchesSearch = !searchTerm || 
        invoice.invoice_number.toLowerCase().includes(searchTerm) ||
        invoice.supplier.toLowerCase().includes(searchTerm) ||
        (invoice.amount && invoice.amount.toString().includes(searchTerm));

      const matchesStatus = !statusValue || invoice.status === statusValue;
      const matchesCategory = !categoryValue || invoice.classification === categoryValue;

      return matchesSearch && matchesStatus && matchesCategory;
    });

    currentPage = 1;
    renderTable();
  }

  searchInput.addEventListener('input', applyFilters);
  statusFilter.addEventListener('change', applyFilters);
  categoryFilter.addEventListener('change', applyFilters);

  clearFiltersBtn.addEventListener('click', function() {
    searchInput.value = '';
    statusFilter.value = '';
    categoryFilter.value = '';
    applyFilters();
  });

  prevPageBtn.addEventListener('click', function() {
    if (currentPage > 1) {
      currentPage--;
      renderTable();
    }
  });

  nextPageBtn.addEventListener('click', function() {
    const totalPages = Math.ceil(filteredInvoices.length / itemsPerPage);
    if (currentPage < totalPages) {
      currentPage++;
      renderTable();
    }
  });

  exportBtn.addEventListener('click', function() {
    alert('Funcionalidad de exportaci√≥n en desarrollo');
  });

  closeModalBtn.addEventListener('click', function() {
    invoiceModal.style.display = 'none';
  });

  invoiceModal.addEventListener('click', function(e) {
    if (e.target === invoiceModal) {
      invoiceModal.style.display = 'none';
    }
  });

  window.viewInvoice = function(id) {
    const invoice = invoicesData.find(inv => inv.id === id);
    if (invoice) {
      modalBody.innerHTML = `
        <div style=\"display: grid; gap: 15px;\">
          <div><strong>N√∫mero:</strong> ${invoice.invoice_number}</div>
          <div><strong>Proveedor:</strong> ${invoice.supplier}</div>
          <div><strong>Fecha de Emisi√≥n:</strong> ${formatDate(invoice.invoice_date)}</div>
          <div><strong>Fecha de Vencimiento:</strong> ${invoice.due_date ? formatDate(invoice.due_date) : ''}</div>
          <div><strong>Monto:</strong> ${invoice.amount ? formatCurrency(invoice.amount) : ''}</div>
          <div><strong>Estado:</strong> ${createStatusBadge(invoice.status || 'Pendiente')}</div>
          <div><strong>Categor√≠a:</strong> ${invoice.classification}</div>
        </div>
      `;
      invoiceModal.style.display = 'flex';
    }
  };

  window.editInvoice = function(id) {
    alert(`Editar factura ID: ${id} - Funcionalidad en desarrollo`);
  };

  window.deleteInvoice = function(id) {
    if (confirm('¬øEst√°s seguro de que deseas eliminar esta factura?')) {
      const index = invoicesData.findIndex(inv => inv.id === id);
      if (index !== -1) {
        invoicesData.splice(index, 1);
        applyFilters();
      }
    }
  };

  async function fetchInvoices() {
    try {
      const response = await fetch('http://localhost:5000/invoices');
      if (!response.ok) {
        throw new Error('Failed to fetch invoices');
      }
      invoicesData = await response.json();
      applyFilters();
    } catch (error) {
      alert('Error fetching invoices: ' + error.message);
    }
  }

  fetchInvoices();
});
</script>

<style>
  .invoices-container {
    padding: 20px;
    max-width: 1200px;
    margin: 0 auto;
  }
  

  
  .subtitle {
    color: #7f8c8d;
    margin-bottom: 25px;
    font-size: 16px;
  }
  
  .toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 25px;
    padding: 20px;
    background: var(--bg-secondary);
    border-radius: 12px;
    border: 1px solid var(--border-color);
  }
  
  .left {
    display: flex;
    gap: 12px;
    flex-wrap: wrap;
  }
  
  .right {
    display: flex;
    gap: 12px;
  }
  
  input, select {
    padding: 10px 14px;
    border: 1px solid #e0e0e0;
    border-radius: 8px;
    background: rgba(255, 255, 255, 0.95);
    font-size: 14px;
    transition: all 0.3s ease;
  }
  
  input:focus, select:focus {
    outline: none;
    border-color: #3498db;
    box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
  }
  
  #search-input {
    min-width: 300px;
  }
  
  button {
    padding: 10px 18px;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 500;
    font-size: 14px;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    gap: 6px;
  }
  
  .primary {
    background: #3498db;
    color: white;
  }
  
  .secondary {
    background: #95a5a6;
    color: white;
  }
  
  .primary:hover {
    background: #2980b9;
    transform: translateY(-1px);
  }
  
  .secondary:hover {
    background: #7f8c8d;
    transform: translateY(-1px);
  }
  
  .table-container {
    background: var(--bg-secondary);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    overflow: hidden;
    margin-bottom: 20px;
  }
  
  table {
    width: 100%;
    border-collapse: collapse;
  }
  
  thead {
    background: transparent;
  }
  
  th {
    padding: 15px 12px;
    text-align: left;
    font-weight: 600;
    color: #2c3e50;
    border-bottom: 2px solid rgba(52, 152, 219, 0.2);
  }
  
  td {
    padding: 12px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    color: #34495e;
  }
  
  tbody tr:hover {
    background: rgba(52, 152, 219, 0.05);
  }
  
  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 15px;
    margin-top: 20px;
  }
  
  .pagination button {
    padding: 8px 16px;
    background: rgba(255, 255, 255, 0.1);
    color: #2c3e50;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .pagination button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
  
  .pagination button:not(:disabled):hover {
    background: rgba(52, 152, 219, 0.1);
  }
  
  #page-info {
    color: #7f8c8d;
    font-weight: 500;
  }
  
  /* Modal styles */
  .modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }
  
  .modal-content {
    background: rgba(255, 255, 255, 0.95);
    border-radius: 12px;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    max-width: 600px;
    width: 90%;
    max-height: 80vh;
    overflow-y: auto;
  }
  
  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 20px;
    border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  }
  
  .modal-header h3 {
    margin: 0;
    color: #2c3e50;
  }
  
  .close-btn {
    background: none;
    border: none;
    font-size: 20px;
    cursor: pointer;
    color: #7f8c8d;
    padding: 5px;
  }
  
  .close-btn:hover {
    color: #e74c3c;
  }
  
  .modal-body {
    padding: 20px;
  }
  
  /* Status badges */
  .status-badge {
    padding: 4px 8px;
    border-radius: 12px;
    font-size: 12px;
    font-weight: 500;
    text-transform: uppercase;
  }
  
  .status-pendiente {
    background: #f39c12;
    color: white;
  }
  
  .status-pagada {
    background: #27ae60;
    color: white;
  }
  
  .status-vencida {
    background: #e74c3c;
    color: white;
  }
  
  .status-cancelada {
    background: #95a5a6;
    color: white;
  }
  
  /* Action buttons in table */
  .action-btn {
    padding: 4px 8px;
    font-size: 12px;
    margin: 0 2px;
  }
  
  .btn-view {
    background: #3498db;
    color: white;
  }
  
  .btn-edit {
    background: #f39c12;
    color: white;
  }
  
  .btn-delete {
    background: #e74c3c;
    color: white;
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Datos de ejemplo de facturas
    const invoicesData = [
      {
        id: 1,
        number: 'FAC-2024-001',
        supplier: 'Constructora ABC S.A.',
        issueDate: '2024-01-15',
        dueDate: '2024-02-15',
        amount: 1250000,
        status: 'Pendiente',
        category: 'Construcci√≥n'
      },
      {
        id: 2,
        number: 'FAC-2024-002',
        supplier: 'Suministros Municipales Ltda.',
        issueDate: '2024-01-20',
        dueDate: '2024-02-20',
        amount: 850000,
        status: 'Pagada',
        category: 'Suministros'
      },
      {
        id: 3,
        number: 'FAC-2024-003',
        supplier: 'Servicios T√©cnicos Pro',
        issueDate: '2024-01-10',
        dueDate: '2024-01-25',
        amount: 450000,
        status: 'Vencida',
        category: 'Servicios'
      },
      {
        id: 4,
        number: 'FAC-2024-004',
        supplier: 'Tecnolog√≠a Avanzada S.A.',
        issueDate: '2024-01-25',
        dueDate: '2024-02-25',
        amount: 2100000,
        status: 'Pendiente',
        category: 'Tecnolog√≠a'
      },
      {
        id: 5,
        number: 'FAC-2024-005',
        supplier: 'Mantenimiento Integral',
        issueDate: '2024-01-12',
        dueDate: '2024-02-12',
        amount: 320000,
        status: 'Cancelada',
        category: 'Mantenimiento'
      }
    ];
    
    let filteredInvoices = [...invoicesData];
    let currentPage = 1;
    const itemsPerPage = 10;
    
    // Referencias a elementos DOM
    const searchInput = document.getElementById('search-input');
    const statusFilter = document.getElementById('status-filter');
    const categoryFilter = document.getElementById('category-filter');
    const clearFiltersBtn = document.getElementById('clear-filters-btn');
    const exportBtn = document.getElementById('export-btn');
    const invoicesTable = document.getElementById('invoices-table');
    const invoicesTbody = document.getElementById('invoices-tbody');
    const prevPageBtn = document.getElementById('prev-page');
    const nextPageBtn = document.getElementById('next-page');
    const pageInfo = document.getElementById('page-info');
    const invoiceModal = document.getElementById('invoice-modal');
    const closeModalBtn = document.getElementById('close-modal');
    const modalBody = document.getElementById('modal-body');
    
    // Funci√≥n para formatear moneda
    function formatCurrency(amount) {
      return new Intl.NumberFormat('es-CL', {
        style: 'currency',
        currency: 'CLP'
      }).format(amount);
    }
    
    // Funci√≥n para formatear fecha
    function formatDate(dateString) {
      return new Date(dateString).toLocaleDateString('es-CL');
    }
    
    // Funci√≥n para crear badge de estado
    function createStatusBadge(status) {
      const statusClass = `status-${status.toLowerCase()}`;
      return `<span class="status-badge ${statusClass}">${status}</span>`;
    }
    
    // Funci√≥n para renderizar tabla
    function renderTable() {
      const startIndex = (currentPage - 1) * itemsPerPage;
      const endIndex = startIndex + itemsPerPage;
      const pageInvoices = filteredInvoices.slice(startIndex, endIndex);
      
      invoicesTbody.innerHTML = '';
      
      if (pageInvoices.length === 0) {
        invoicesTbody.innerHTML = `
          <tr>
            <td colspan="8" style="text-align: center; padding: 40px; color: #7f8c8d;">
              üìã No se encontraron facturas que coincidan con los filtros aplicados
            </td>
          </tr>
        `;
        return;
      }
      
      pageInvoices.forEach(invoice => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${invoice.number}</td>
          <td>${invoice.supplier}</td>
          <td>${formatDate(invoice.issueDate)}</td>
          <td>${formatDate(invoice.dueDate)}</td>
          <td>${formatCurrency(invoice.amount)}</td>
          <td>${createStatusBadge(invoice.status)}</td>
          <td>${invoice.category}</td>
          <td>
            <button class="action-btn btn-view" onclick="viewInvoice(${invoice.id})">üëÅÔ∏è Ver</button>
            <button class="action-btn btn-edit" onclick="editInvoice(${invoice.id})">‚úèÔ∏è Editar</button>
            <button class="action-btn btn-delete" onclick="deleteInvoice(${invoice.id})">üóëÔ∏è Eliminar</button>
          </td>
        `;
        invoicesTbody.appendChild(row);
      });
      
      updatePagination();
    }
    
    // Funci√≥n para actualizar paginaci√≥n
    function updatePagination() {
      const totalPages = Math.ceil(filteredInvoices.length / itemsPerPage);
      
      prevPageBtn.disabled = currentPage === 1;
      nextPageBtn.disabled = currentPage === totalPages || totalPages === 0;
      
      pageInfo.textContent = totalPages > 0 ? `P√°gina ${currentPage} de ${totalPages}` : 'Sin resultados';
    }
    
    // Funci√≥n para aplicar filtros
    function applyFilters() {
      const searchTerm = searchInput.value.toLowerCase();
      const statusValue = statusFilter.value;
      const categoryValue = categoryFilter.value;
      
      filteredInvoices = invoicesData.filter(invoice => {
        const matchesSearch = !searchTerm || 
          invoice.number.toLowerCase().includes(searchTerm) ||
          invoice.supplier.toLowerCase().includes(searchTerm) ||
          invoice.amount.toString().includes(searchTerm);
        
        const matchesStatus = !statusValue || invoice.status === statusValue;
        const matchesCategory = !categoryValue || invoice.category === categoryValue;
        
        return matchesSearch && matchesStatus && matchesCategory;
      });
      
      currentPage = 1;
      renderTable();
    }
    
    // Event listeners para filtros
    searchInput.addEventListener('input', applyFilters);
    statusFilter.addEventListener('change', applyFilters);
    categoryFilter.addEventListener('change', applyFilters);
    
    // Limpiar filtros
    clearFiltersBtn.addEventListener('click', function() {
      searchInput.value = '';
      statusFilter.value = '';
      categoryFilter.value = '';
      applyFilters();
    });
    
    // Paginaci√≥n
    prevPageBtn.addEventListener('click', function() {
      if (currentPage > 1) {
        currentPage--;
        renderTable();
      }
    });
    
    nextPageBtn.addEventListener('click', function() {
      const totalPages = Math.ceil(filteredInvoices.length / itemsPerPage);
      if (currentPage < totalPages) {
        currentPage++;
        renderTable();
      }
    });
    
    // Exportar datos
    exportBtn.addEventListener('click', function() {
      // Aqu√≠ implementar√≠as la l√≥gica de exportaci√≥n
      alert('Funcionalidad de exportaci√≥n en desarrollo');
    });
    
    // Modal
    closeModalBtn.addEventListener('click', function() {
      invoiceModal.style.display = 'none';
    });
    
    // Cerrar modal al hacer clic fuera
    invoiceModal.addEventListener('click', function(e) {
      if (e.target === invoiceModal) {
        invoiceModal.style.display = 'none';
      }
    });
    
    // Funciones globales para acciones de tabla
    window.viewInvoice = function(id) {
      const invoice = invoicesData.find(inv => inv.id === id);
      if (invoice) {
        modalBody.innerHTML = `
          <div style="display: grid; gap: 15px;">
            <div><strong>N√∫mero:</strong> ${invoice.number}</div>
            <div><strong>Proveedor:</strong> ${invoice.supplier}</div>
            <div><strong>Fecha de Emisi√≥n:</strong> ${formatDate(invoice.issueDate)}</div>
            <div><strong>Fecha de Vencimiento:</strong> ${formatDate(invoice.dueDate)}</div>
            <div><strong>Monto:</strong> ${formatCurrency(invoice.amount)}</div>
            <div><strong>Estado:</strong> ${createStatusBadge(invoice.status)}</div>
            <div><strong>Categor√≠a:</strong> ${invoice.category}</div>
          </div>
        `;
        invoiceModal.style.display = 'flex';
      }
    };
    
    window.editInvoice = function(id) {
      alert(`Editar factura ID: ${id} - Funcionalidad en desarrollo`);
    };
    
    window.deleteInvoice = function(id) {
      if (confirm('¬øEst√°s seguro de que deseas eliminar esta factura?')) {
        const index = invoicesData.findIndex(inv => inv.id === id);
        if (index !== -1) {
          invoicesData.splice(index, 1);
          applyFilters();
        }
      }
    };
    
    // Renderizar tabla inicial
    renderTable();
  });
</script>