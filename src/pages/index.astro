---
import AppLayout from '../layouts/AppLayout.astro';
import Navigation from '../components/Navigation.astro';
import Dashboard from '../views/Dashboard.astro';
import Invoices from '../views/Invoices.astro';
import Suppliers from '../views/Suppliers.astro';
import Export from '../views/Export.astro';
import Settings from '../views/Settings.astro';
---

<AppLayout title="Sistema FrontDesk - Gestión de Facturas">
  <aside>
    <div class="sidebar-header">
      <h2>📋 FrontDesk</h2>
    </div>
    <Navigation />
  </aside>

  <div class="main-content">
    <header>
      <h1>Sistema de Gestión de Facturas</h1>
      <div class="user-info">
        👤 Usuario: Admin | 🕒 Última sesión: Hoy 14:30
      </div>
    </header>

    <main>
      <section id="dashboard-view" class="view active">
        <Dashboard />
      </section>
      
      <section id="invoices-view" class="view">
        <Invoices />
      </section>
      
      <section id="suppliers-view" class="view">
        <Suppliers />
      </section>
      
      <section id="export-view" class="view">
        <Export />
      </section>
      
      <section id="settings-view" class="view">
        <Settings />
      </section>
    </main>
  </div>
</AppLayout>

<script>
  class SPANavigator {
    constructor() {
      this.currentView = 'dashboard';
      this.views = new Map();
      this.initViews();
      this.initNavigation();
    }

    initViews() {
      const viewElements = document.querySelectorAll('.view');
      viewElements.forEach(view => {
        const viewId = view.id.replace('-view', '');
        this.views.set(viewId, view);
      });
    }

    initNavigation() {
      const navButtons = document.querySelectorAll('nav button');
      
      navButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          const targetView = e.target.dataset.target;
          if (targetView) {
            this.navigateTo(targetView);
          }
        });
      });
    }

    navigateTo(viewName) {
      if (!this.views.has(viewName)) {
        console.error(`Vista '${viewName}' no encontrada`);
        return;
      }

      // Ocultar vista actual
      if (this.views.has(this.currentView)) {
        this.views.get(this.currentView).classList.remove('active');
      }

      // Mostrar nueva vista
      this.views.get(viewName).classList.add('active');
      this.updateActiveNav(viewName);
      this.currentView = viewName;
      this.onViewChange(viewName);
    }

    updateActiveNav(activeView) {
      const navButtons = document.querySelectorAll('nav button');
      navButtons.forEach(btn => {
        btn.classList.remove('active');
        if (btn.dataset.target === activeView) {
          btn.classList.add('active');
        }
      });
    }

    onViewChange(viewName) {
      switch(viewName) {
        case 'invoices':
          this.initInvoicesFeatures();
          break;
        case 'suppliers':
          this.initSuppliersFeatures();
          break;
        case 'export':
          this.initExportFeatures();
          break;
        case 'settings':
          this.initSettingsFeatures();
          break;
      }
    }

    initInvoicesFeatures() {
      const searchBox = document.querySelector('#invoices-view input[type="text"]');
      if (searchBox && !searchBox.hasAttribute('data-initialized')) {
        searchBox.addEventListener('input', (e) => {
          this.filterInvoices(e.target.value);
        });
        searchBox.setAttribute('data-initialized', 'true');
      }
    }

    initSuppliersFeatures() {
      const searchBox = document.querySelector('#suppliers-view input[type="text"]');
      if (searchBox && !searchBox.hasAttribute('data-initialized')) {
        searchBox.addEventListener('input', (e) => {
          this.filterSuppliers(e.target.value);
        });
        searchBox.setAttribute('data-initialized', 'true');
      }
    }

    initExportFeatures() {
      // Inicializar funcionalidades de exportación
      console.log('Funcionalidades de exportación inicializadas');
    }

    initSettingsFeatures() {
      // Inicializar funcionalidades de configuración
      console.log('Funcionalidades de configuración inicializadas');
    }

    filterInvoices(searchTerm) {
      const tableRows = document.querySelectorAll('#invoices-view table tbody tr');
      tableRows.forEach(row => {
        const text = row.textContent?.toLowerCase() || '';
        row.style.display = text.includes(searchTerm.toLowerCase()) ? '' : 'none';
      });
    }

    filterSuppliers(searchTerm) {
      const tableRows = document.querySelectorAll('#suppliers-view table tbody tr');
      tableRows.forEach(row => {
        const text = row.textContent?.toLowerCase() || '';
        row.style.display = text.includes(searchTerm.toLowerCase()) ? '' : 'none';
      });
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    try {
      window.spaNavigator = new SPANavigator();
      console.log('SPA Navigator inicializado correctamente');
    } catch (error) {
      console.error('Error al inicializar SPA Navigator:', error);
    }
  });
</script>

<style lang="stylus">
  aside
    background var(--bg-secondary)
    border-right 1px solid var(--border-color)
    display flex
    flex-direction column
    width 250px
    flex-shrink 0
    height 100vh
    
    @media (max-width: 768px)
      display none
    
  .sidebar-header
    padding 1rem
    border-bottom 1px solid var(--border-color)
    
  .main-content
    display flex
    flex-direction column
    flex 1
    height 100vh
    
  header
    padding 1rem 2rem
    background var(--bg-card)
    border-bottom 1px solid var(--border-color)
    display flex
    justify-content space-between
    align-items center
    flex-shrink 0
    
    .user-info
      color var(--text-secondary)
      font-size 0.9rem
    
  main
    padding 2rem
    overflow-y auto
    flex 1
    
  .view
    display none
    
    &.active
      display block
      animation fadeIn 0.3s ease-in-out
  
  @keyframes fadeIn
    from
      opacity 0
      transform translateY(10px)
    to
      opacity 1
      transform translateY(0)
</style>

