---
interface NavigationItem {
  icon: string;
  label: string;
  customClass?: string;
  target?: string;
  href: string;
}

const navigationItems: NavigationItem[] = [
  {
    icon: "/svg/dollar.svg",
    label: "Resumen",
    customClass: "nav-dashboard",
    target: "dashboard",
    href: "/"
  },
  {
    icon: "/svg/bill.svg",
    label: "Cargar Factura",
    customClass: "nav-loadbill",
    target: "loadbill",
    href: "/loadbill"
  },
  {
    icon: "/svg/bill-list.svg",
    label: "Listado de facturas",
    customClass: "nav-invoices",
    target: "invoices",
    href: "/invoices"
  },
  {
    icon: "/svg/settings.svg",
    label: "Configuración",
    customClass: "nav-settings",
    href: "/settings"
  }
];

const gradientMapping: Record<string, string> = {
  orange: "linear-gradient(90deg, #FF8C00, #FFA500)",
  lightBlue: "linear-gradient(90deg, #87CEEB, #ADD8E6)",
  offWhite: "#F5F5F5"
};

// Obtenemos la ruta actual del lado del servidor
const { pathname } = Astro.url;
---

<nav>
  {navigationItems.map((item) => (
    <a
      href={item.href}
      class={`button-wrapper ${item.href === pathname ? 'active' : ''}`.trim()}
      aria-label={item.label}
      data-target={item.target}
      >
      <button
        type="button"
        class={`btn-layout ${item.customClass || ""}`}
        >
        <div class="icon-wrapper">
          <span class="btn-layout__back"></span>
          <span class="btn-layout__front">
            <span class="btn-layout__icon" aria-hidden="true">
              <img
                src={item.icon}
                alt={item.label}
                width="24"
                height="24"
              />
            </span>
          </span>
        </div>
        <span class="btn-label">{item.label}</span>
      </button>
    </a>
  ))}
</nav>

<style lang="stylus">
nav
  width 10rem
  background #ffffff // offWhite
  border-right 1px solid #E0E0E0 // a lighter border
  display flex
  flex-direction column
  justify-content space-evenly
  align-items center
    
  @media (max-width: 768px)
    width 200px
      
  @media (max-width: 640px)
    display none

a
  text-decoration none

.button-wrapper
  display flex
  flex-direction column
  align-items center
  position relative

.icon-wrapper
  position relative
  width 4.5em
  height 4.5em
  perspective 24em
  transform-style preserve-3d

.btn-layout
  background-color transparent
  border none
  outline none
  width 100%
  height 100%
  -webkit-tap-highlight-color transparent
  cursor pointer
  display flex
  flex-direction column
  align-items center
  
  &__back,
  &__front
    transition opacity 0.3s cubic-bezier(0.83, 0, 0.17, 1), transform 0.3s cubic-bezier(0.83, 0, 0.17, 1)
    border-radius 1.25em
    position absolute
    top 0
    left 0
    width 100%
    height 100%
  
  &__back
    background linear-gradient(#87CEEB, #ADD8E6) // lightBlue default
    box-shadow 0.5em -0.5em 0.75em hsla(223, 10%, 10%, 0.15)
    display block
    transform rotate(15deg)
    transform-origin 100% 100%
    transition background 0.3s ease, transform 0.3s cubic-bezier(0.83, 0, 0.17, 1)
  
  &__front
    background-color hsla(0, 0%, 100%, 0.15)
    box-shadow 0 0 0 0.1em hsla(0, 0%, 100%, 0.3) inset
    backdrop-filter blur(0.75em)
    -webkit-backdrop-filter blur(0.75em)
    display flex
    transform-origin 80% 50%
  
  &__icon
    margin auto
    width 1.5em
    height 1.5em
    display flex
    align-items center
    justify-content center
    
    img
      width 100%
      height 100%
      object-fit contain

.btn-label
  font-size 1em
  white-space nowrap
  text-align center
  line-height 2
  opacity 0
  margin-top 0.5em
  transition opacity 0.3s, transform 0.3s
  transform translateY(-10px)
  color #333 // Dark text for light theme
  font-weight 500

.button-wrapper:hover .btn-label,
.button-wrapper:focus-within .btn-label,
.button-wrapper.active .btn-label
  opacity 1
  transform translateY(0)

.button-wrapper:hover .btn-layout__back,
.button-wrapper:focus-within .btn-layout__back,
.button-wrapper.active .btn-layout__back
  background linear-gradient(#FF8C00, #FFA500) // orange
  transform rotate(25deg) translate3d(-0.5em, -0.5em, 0.5em)

.button-wrapper:hover .btn-layout__front,
.button-wrapper:focus-within .btn-layout__front,
.button-wrapper.active .btn-layout__front
  transform translateZ(2em)

.button-wrapper.active
  animation activeGlow 0.3s ease-in-out

.button-wrapper.active .btn-layout__back
  box-shadow 0.5em -0.5em 1.5em hsla(223, 10%, 10%, 0.25)

.button-wrapper.active .btn-layout__front
  background-color hsla(0, 0%, 100%, 0.25)
  box-shadow 0 0 0 0.15em hsla(0, 0%, 100%, 0.4) inset

.button-wrapper.active .btn-label
  font-weight 700
  color #FF8C00 // orange for active state

// Animaciones
@keyframes activeGlow
  0%
    filter brightness(1)
  50%
    filter brightness(1.1)
  100%
    filter brightness(1)

// Responsive design
@media (min-width: 768px)
  .icon-btns
    max-width 120px

@media (max-width: 640px)
  .icon-btns
    gap 1.2rem
    padding 1rem 0
    max-width 100px
  
  .icon-btn
    width 3.5em
    height 3.5em
    
    &__label
      font-size 0.9em
</style>

<script>
/* // Función para actualizar el estado activo de los enlaces de navegación
  function updateActiveNavLinks() {
    const currentPath = window.location.pathname;
    const navLinks = document.querySelectorAll('nav .button-wrapper');
    
    navLinks.forEach(link => {
      // Comparamos la ruta del enlace con la ruta actual
      const href = link.getAttribute('href');
      if (href === currentPath) {
        link.classList.add('active');
      } else {
        link.classList.remove('active');
      }
    });
  }

  // Ejecutar cuando la página se carga inicialmente
  updateActiveNavLinks();
  
  // Ejecutar cuando hay una transición de página con Astro
  document.addEventListener('astro:page-load', updateActiveNavLinks); */
</script>

